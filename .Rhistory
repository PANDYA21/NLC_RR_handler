### to create, connect and train NLC
library(RCurl)
library(httr)
library(XML)
library(data.table)
library(reshape2)
library(tidyr)
library(dplyr)
library(stringr)
library(splitstackshape)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"),httpauth=AUTH_BASIC)) # NOTE - the "httpauth=AUTH_BASIC" piece gets rid of the "Error: UNAUTHORIZED" message
######### Housekeeping And Authentication
base_url = "https://gateway.watsonplatform.net/natural-language-classifier/api/v1/classifiers/"
# username = "1f8006fe-d57a-4201-93b6-0563b1573a67" # "abc123-####-####-YOUR-CREDS-HERE" #### BE VERY CAREFUL TO understand "Instantiating Credentials" from bound service vs "Service Credentials"
# password = "EhscvrMhWnzg" # "123456789ABC"  # you need your own ## if you are having authentication issues , may need the other creds.
# username_password = paste(username,":",password)
#
# base_url <- "https://gateway.watsonplatform.net/natural-language-classifier/api"
password <- "byIZc0TJS1Bq"
username <- "8166a940-90d3-4f88-8a93-b76e20aa7152"
username_password = paste(username,":",password)
### to create, connect and train NLC
library(RCurl)
library(httr)
library(XML)
library(data.table)
library(reshape2)
library(tidyr)
library(dplyr)
library(stringr)
library(splitstackshape)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"),httpauth=AUTH_BASIC)) # NOTE - the "httpauth=AUTH_BASIC" piece gets rid of the "Error: UNAUTHORIZED" message
######### Housekeeping And Authentication
base_url = "https://gateway.watsonplatform.net/natural-language-classifier/api/v1/classifiers/"
# username = "1f8006fe-d57a-4201-93b6-0563b1573a67" # "abc123-####-####-YOUR-CREDS-HERE" #### BE VERY CAREFUL TO understand "Instantiating Credentials" from bound service vs "Service Credentials"
# password = "EhscvrMhWnzg" # "123456789ABC"  # you need your own ## if you are having authentication issues , may need the other creds.
# username_password = paste(username,":",password)
#
# base_url <- "https://gateway.watsonplatform.net/natural-language-classifier/api"
password <- "byIZc0TJS1Bq"
username <- "8166a940-90d3-4f88-8a93-b76e20aa7152"
username_password = paste(username,":",password)
## Next - let's create all the functions (but not actually execute them just yet)
###### FUNCTION: LIST ALL CLASSIFIERS AND RETURN NEAT LIST
watson.nlc.listallclassifiers <- function(){
data <- getURL(base_url,userpwd = username_password )
data <- as.data.frame(strsplit(as.character(data),"classifier_id"))
data <- data[-c(1), ] # remove dud first row
data <- data.frame(matrix(data))
colnames(data) <- "V1"
data$V1 <- gsub("[{}]","", data$V1)
data$V1 <- gsub("]","", data$V1)
data$V1 <- gsub("\"","", data$V1)
data$V1 <- gsub("name:","", data$V1)
data$V1 <- gsub(":","", data$V1)
data <- cSplit(data, 'V1', sep=",", type.convert=FALSE)
data[,c(2,4)] <- NULL
data <- as.data.table(data)
setnames(data,c("classifier","name","date_created"))
data <- data[order(date_created),]
return(data)
}
###### FUNCTION CREATE NEW CLASSIFIER - post /v1/classifiers - Creates a classifier with CSV data ## URL below no "/" after base url
watson.nlc.createnewclassifier <- function(file,classifiername) {
return(POST(url="https://gateway.watsonplatform.net/natural-language-classifier/api/v1/classifiers",
authenticate(username,password),
body = list(training_data = upload_file(file),
training_metadata = paste("{\"language\":\"en\",\"name\":",classifiername,"}",sep="")
)))}
###### end of function
###### FUNCTION - CHECK CLASSIFIER STATUS
watson.nlc.checkclassifierstatus <- function(classifier_id) {
return(
getURL(paste(base_url,classifier_id,sep=""),userpwd = username_password)
)
}
### end of function
###### FUNCTION - DELETE CLASSIFIER - Receives name of Classifier to Kill; May not be able to do this until training complete
watson.nlc.deleteclassifier <- function(kill_classifier) {
return(DELETE(paste(base_url,kill_classifier,sep=""),
userpwd = username_password)) }
### end of function
###### FUNCTION: ACCEPT QUERY & RETURN RESULT: CLASSIFIER and % FROM TEXT INPUT AND PROCESS TO LOOK GOOD
watson.nlc.processtextreturnclass <- function(classifier_id,query_text){
query_text <- URLencode(query_text)
data <- getURL(paste(base_url,classifier_id,"/classify","?text=", query_text,sep=""),userpwd = username_password)
data <- as.data.frame(strsplit(as.character(data),"class_name"))
data <- data[-c(1), ] # remove dud first row
data <- gsub("[{}]","", data)
data <- gsub("confidence","", data)
data <- data.frame(matrix(data))
setnames(data,("V1"))
data$V1 <- gsub("\"","", data$V1)
data$V1 <- gsub(":","", data$V1)
data$V1 <- gsub("]","", data$V1)
data <- cSplit(data, 'V1', sep=",", type.convert=FALSE)
setnames(data,c("class","confidence"))
return(data) }
### end of function
######################################################### END OF FUNCTION DECLARATIONS
write.csv(read.csv2("train_data_nlc2.csv"), file = "train_data_nlc.csv", row.names = F)
write.csv2(read.csv("train_data_nlc.csv"), file = "train_data_nlc2.csv", row.names = F)
write.csv(read.csv2("train_data_nlc2.csv"), file = "train_data_nlc.csv", row.names = F)
read.csv("train_data_nlc.csv")
thefile <- "train_data_nlc.csv"
thename <- "\"hack01\""
watson.nlc.createnewclassifier(thefile, thename)  # calls function, passes file and name from above, starts the magic. might take 2 to 20+ minutes depending on complexity
watson.nlc.listallclassifiers()
cat(watson.nlc.checkclassifierstatus(status))
status <- as.character(watson.nlc.listallclassifiers()$classifier) # 2374f9x69-nlc-6914
cat(watson.nlc.checkclassifierstatus(status))
cat(watson.nlc.checkclassifierstatus(status))
query = "I am 89"
watson.nlc.processtextreturnclass(classifier,query)
classifier <- status
query = "I am 89"
watson.nlc.processtextreturnclass(classifier,query)
watson.nlc.processtextreturnclass
getURL(paste(base_url,classifier_id,"/classify","?text=", "I am 1",sep=""),userpwd = username_password)
getURL(paste(base_url,classifier,"/classify","?text=", "I am 1",sep=""),userpwd = username_password)
cat(watson.nlc.checkclassifierstatus(status))
cat(watson.nlc.checkclassifierstatus(status))
load_or_install <- function(func = "", ...){
if(require(package =  func, character.only = T) == FALSE){
install.packages(func, clean = T, ...)
require(package =  func, character.only = T)
} else {
require(package =  func, character.only = T)
}
}
cat(watson.nlc.checkclassifierstatus(status))
cat(watson.nlc.checkclassifierstatus(status))
cat(watson.nlc.checkclassifierstatus(status))
### to create, connect and train NLC
library(RCurl)
library(httr)
library(XML)
library(data.table)
library(reshape2)
library(tidyr)
library(dplyr)
library(stringr)
library(splitstackshape)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"),httpauth=AUTH_BASIC)) # NOTE - the "httpauth=AUTH_BASIC" piece gets rid of the "Error: UNAUTHORIZED" message
cat(watson.nlc.checkclassifierstatus(status))
cat(watson.nlc.checkclassifierstatus(status))
ress <- POST("http://127.0.0.1:1234/custom/summarize", encode = "multipart", body = "I play tennis often", content_type("text"))
ress
cat(content(ress, "text"))
ress <- POST("http://127.0.0.1:1234/custom/summarize", encode = "multipart", body = "I am 26", content_type("text"))
ress
ress <- POST("http://127.0.0.1:1234/custom/summarize", encode = "multipart", body = "I am 26", content_type("text"))
ress
cat(content(ress, "text"))
query = "I am 1"
watson.nlc.processtextreturnclass(classifier,query)
load_or_install("rjson")
toJSON(watson.nlc.processtextreturnclass(classifier,query))
ress <- POST("http://127.0.0.1:1234/custom/summarize", encode = "multipart", body = "I am 26", content_type("text"))
ress
cat(content(ress, "text"))
list("i am 26" = NA)
post <- list("i am 26" = NA)
watson.nlc.processtextreturnclass(classifier, as.character(names(post)))
watson.nlc.processtextreturnclass
require('Rook')
load_or_install("rjson")
classifier <<- "2374f9x69-nlc-6914" # the nlc id
source("udfs.R")
source("udfs_watson.R")
source("udfsB.R")
require("rjson")
post <- list("i am 26" = NA)
watson.nlc.processtextreturnclass(classifier, as.character(names(post)))
load_or_install
load_or_install("splitstackshape", repos='http://cran.rstudio.com/')
cSplit()
cSplit
watson.nlc.processtextreturnclass(classifier, as.character(names(post)))
require('Rook')
require("rjson")
classifier <<- "2374f9x69-nlc-6914" # the nlc id
source("udfs.R")
source("udfs_watson.R")
source("udfsB.R")
post <- list("i am 26" = NA)
watson.nlc.processtextreturnclass(classifier, as.character(names(post)))
load_or_install("tidyr", repos='http://cran.rstudio.com/')
watson.nlc.processtextreturnclass(classifier, as.character(names(post)))
load_or_install("dplyr", repos='http://cran.rstudio.com/')
watson.nlc.processtextreturnclass(classifier, as.character(names(post)))
load_or_install("reshape2", repos='http://cran.rstudio.com/')
watson.nlc.processtextreturnclass(classifier, as.character(names(post)))
load_or_install("XML", repos='http://cran.rstudio.com/')
watson.nlc.processtextreturnclass(classifier, as.character(names(post)))
post <- list("i am 26" = NA)
require('Rook')
require("rjson")
classifier <<- "2374f9x69-nlc-6914" # the nlc id
source("udfs.R")
source("udfs_watson.R")
source("udfsB.R")
watson.nlc.processtextreturnclass(classifier, as.character(names(post)))
username_password
watson.nlc.processtextreturnclass
getURL(paste(base_url,classifier,"/classify","?text=", names(post),sep=""),userpwd = username_password)
post
names(post)
classifier
getURL(paste(base_url,classifier,"/classify","?text=", as.character(names(post)),sep=""),userpwd = username_password)
watson.nlc.listallclassifiers()
base_url = "https://gateway.watsonplatform.net/natural-language-classifier/api/v1/classifiers/"
# username = "1f8006fe-d57a-4201-93b6-0563b1573a67" # "abc123-####-####-YOUR-CREDS-HERE" #### BE VERY CAREFUL TO understand "Instantiating Credentials" from bound service vs "Service Credentials"
# password = "EhscvrMhWnzg" # "123456789ABC"  # you need your own ## if you are having authentication issues , may need the other creds.
# username_password = paste(username,":",password)
#
# base_url <- "https://gateway.watsonplatform.net/natural-language-classifier/api"
password <- "byIZc0TJS1Bq"
username <- "8166a940-90d3-4f88-8a93-b76e20aa7152"
username_password = paste(username,":",password)
watson.nlc.listallclassifiers()
getURL(paste(base_url,classifier,"/classify","?text=", as.character(names(post)),sep=""),userpwd = username_password)
classifier
username_password
password <- "byIZc0TJS1Bq"
username <- "8166a940-90d3-4f88-8a93-b76e20aa7152"
username_password = paste(username,":",password)
names(post)
getURL(paste(base_url,classifier,"/classify","?text=", as.character(names(post)),sep=""),userpwd = username_password)
base_url
base_url <- "https://gateway.watsonplatform.net/natural-language-classifier/api"
getURL(paste(base_url,classifier,"/classify","?text=", as.character(names(post)),sep=""),userpwd = username_password)
GET(base.url)
GET(base_url)
ress <- .Last.value
content(ress, "text")
base_url
base_url = "https://gateway.watsonplatform.net/natural-language-classifier/api/v1/classifiers/"
GET(base_url)
ress <- .Last.value
content(ress, "text")
watson.nlc.listallclassifiers()
status <- as.character(watson.nlc.listallclassifiers()$classifier) # 2374f9x69-nlc-6914
cat(watson.nlc.checkclassifierstatus(status))
classifier <- status
query = "I am 89"
watson.nlc.processtextreturnclass(classifier,query)
getURL(paste(base_url,classifier,"/classify","?text=", as.character(names(post)),sep=""),userpwd = username_password)
status
classifier
ress <- POST("http://127.0.0.1:1234/custom/summarize", encode = "multipart", body = "I am 26", content_type("text"))
ress
cat(content(ress, "text"))
ress <- POST("http://127.0.0.1:1234/custom/summarize", encode = "multipart", body = "I am 26", content_type("text"))
ress
cat(content(ress, "text"))
require('Rook')
require("rjson")
classifier <<- "2374f9x69-nlc-6914" # the nlc id
setwd("~/GitHub/NLC_RR_handler/")
source("udfs.R")
source("udfs_watson.R")
source("udfsB.R")
ress <- POST("http://127.0.0.1:1234/custom/summarize", encode = "multipart", body = "I am 26", content_type("text"))
ress
cat(content(ress, "text"))
ress <- GET("http://127.0.0.1:1234/custom/summarize")
cat(content(ress, "text"))
ress <- POST("http://127.0.0.1:1234/custom/summarize", encode = "multipart", body = "I want cloths", content_type("text"))
ress
cat(content(ress, "text"))
ress <- POST("http://127.0.0.1:1234/custom/summarize", encode = "multipart",
body = "I am a man and looking for cloth", content_type("text"))
ress
cat(content(ress, "text"))
ress <- POST("http://127.0.0.1:1234/custom/summarize", encode = "multipart",
body = "I am 26 and looking for cloth", content_type("text"))
ress
cat(content(ress, "text"))
ress <- POST("http://127.0.0.1:1234/custom/summarize", encode = "multipart",
body = "I am 26. looking for cloth", content_type("text"))
ress
cat(content(ress, "text"))
httpdPort
??httpdPort
ress <- POST("http://127.0.0.1:1234/custom/summarize", encode = "multipart",
body = "I am 26. looking for cloth", content_type("text"))
require('Rook')
require("rjson")
classifier <<- "2374f9x69-nlc-6914" # the nlc id
setwd("~/GitHub/NLC_RR_handler/")
source("udfs.R")
source("udfs_watson.R")
source("udfsB.R")
ress <- POST("http://127.0.0.1:1234/custom/summarize", encode = "multipart",
body = "I am 26. looking for cloth", content_type("text"))
ress
cat(content(ress, "text"))
ress <- POST("http://http://nlc-rr-handler.eu-gb.mybluemix.net/custom/summarize", encode = "multipart", body = "I want cloths", content_type("text"))
ress <- POST("http://nlc-rr-handler.eu-gb.mybluemix.net/custom/summarize", encode = "multipart", body = "I want cloths", content_type("text"))
ress
cat(content(ress, "text"))
ress <- POST("http://10.0.48.1:1234/custom/summarize", encode = "multipart",
body = "I am 26. looking for cloth", content_type("text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = "I am 26. looking for cloth", content_type("text"))
rook = Rhttpd$new()
ress <- GET("http://127.0.0.1:1234/custom/summarize")
cat(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = "I am 26. looking for cloth", content_type("text"))
ress <- POST("http://127.0.0.1:1234/custom/summarize", encode = "multipart",
body = "I am 26. looking for cloth", content_type("text"))
ress
cat(content(ress, "text"))
unlockBinding
assign
tools:::startDynamicHelp
tools::startDynamicHelp
tools::startDynamicHelp
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = "I am 26. looking for cloth", content_type("text"))
require('Rook')
require("rjson")
classifier <<- "2374f9x69-nlc-6914" # the nlc id
setwd("~/GitHub/NLC_RR_handler/")
source("udfs.R")
source("udfs_watson.R")
source("udfsB.R")
ress <- POST("http://127.0.0.1:1234/custom/summarize", encode = "multipart",
body = "I am 26. looking for cloth", content_type("text"))
ress
cat(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = "I am 26. looking for cloth", content_type("text"))
ress
rook = Rhttpd$new()
rook$appList
rook$listenAddr
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = "I am 26. looking for cloth", content_type("text"))
ress <- GET("http://127.0.0.1:1234/custom/summarize")
cat(content(ress, "text"))
require('Rook')
require("rjson")
classifier <<- "2374f9x69-nlc-6914" # the nlc id
setwd("~/GitHub/NLC_RR_handler/")
source("udfs.R")
source("udfs_watson.R")
source("udfsB.R")
ress <- GET("http://127.0.0.1:1234/custom/summarize")
cat(content(ress, "text"))
ress <- POST("http://127.0.0.1:1234/custom/summarize", encode = "multipart",
body = "I am 26. looking for cloth", content_type("text"))
ress <- GET("http://127.0.0.1:1234/custom/summarize")
cat(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = "I am 26. looking for cloth", content_type("text"))
ress <- GET("http://localhost:1234/custom/summarize")
cat(content(ress, "text"))
ress <- GET("http://localhost:1234/custom/summarize")
require('Rook')
require("rjson")
classifier <<- "2374f9x69-nlc-6914" # the nlc id
setwd("~/GitHub/NLC_RR_handler/")
source("udfs.R")
source("udfs_watson.R")
source("udfsB.R")
ress <- GET("http://localhost:1234/custom/summarize")
cat(content(ress, "text"))
ress <- POST("http://127.0.0.1:1234/custom/summarize", encode = "multipart", body = "I want cloths", content_type("text"))
ress
cat(content(ress, "text"))
ress <- POST("http://127.0.0.1:1234/custom/summarize", encode = "multipart",
body = "I am 26. looking for cloth", content_type("text"))
ress
cat(content(ress, "text"))
env
ress <- GET("http://localhost:1234/custom/summarize")
cat(content(ress, "text"))
require('Rook')
require("rjson")
classifier <<- "2374f9x69-nlc-6914" # the nlc id
setwd("~/GitHub/NLC_RR_handler/")
source("udfs.R")
source("udfs_watson.R")
source("udfsB.R")
ress <- GET("http://localhost:1234/custom/summarize")
cat(content(ress, "text"))
ress <- GET("http://127.0.0.1:1234/custom/summarize")
cat(content(ress, "text"))
ress <- GET("http://localhost:1234/custom/summarize")
cat(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = "I am 26. looking for cloth", content_type("text"))
ress
cat(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = "I am 26. looking for cloth", content_type("text"))
ress
cat(content(ress, "text"))
ress <- GET("http://127.0.0.1:1234/custom/summarize")
cat(content(ress, "text"))
require('Rook')
require("rjson")
classifier <<- "2374f9x69-nlc-6914" # the nlc id
setwd("~/GitHub/NLC_RR_handler/")
source("udfs.R")
source("udfs_watson.R")
source("udfsB.R")
ress <- GET("http://127.0.0.1:1234/custom/summarize")
cat(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = "I am 26. looking for cloth", content_type("text"))
ress
cat(content(ress, "text"))
require('Rook')
require("rjson")
classifier <<- "2374f9x69-nlc-6914" # the nlc id
setwd("~/GitHub/NLC_RR_handler/")
source("udfs.R")
source("udfs_watson.R")
source("udfsB.R")

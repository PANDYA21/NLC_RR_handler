asked <- unlist(lapply(strsplit(chatt, ":"), function(x) x[2]))
asked <- asked[!is.na(asked)]
asked <- unique(asked)
if(length(asked) < 9 | length(asked) == 0){
## ask the remaining questions
all.classes <- c("user_gender", "user_age", "query_cloth", "style",
"brand", "color", "price", "material", "climate")
rem.classes <- all.classes[-c(1:length(asked))]
if(length(rem.classes) != 0){
rem.classes <- rem.classes[1]
switch (rem.classes,
"user_gender" = {next.que <- "What is your gender?"},
"user_age" = {next.que <- "What is your age?"},
"query_cloth" = {next.que <- "What are you looking for?"},
"style" = {next.que <- "Are you looking for any specific styles?"},
"brand" = {next.que <- "Do you have any preferences for brands?"},
"color" = {next.que <- "Are you looking for a specific color?"},
"price" = {next.que <- "Do you have any price criteria?"},
"material" = {next.que <- "Any additional material details?"},
"climate" = {next.que <- "What season are you going to wear it in?"})
} else {
next.que <- ""
}
} else {
next.que <- ""
}
return(next.que)
}
asked <- unique(asked)
getNextQue(chatt)
## invalid question
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"this is bullshit",
"conv_id":"48750"}', content_type("application/json"))
ress
fromJSON(content(ress, "text"))
## invalid question
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"this is bullshit",
"conv_id":"48750"}', content_type("application/json"))
ress
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"i am 26",
"conv_id":"48750"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"",
"conv_id":"start"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"hi",
"conv_id":"start"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"jacket",
"conv_id":"start"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"i am 26 years old",
"conv_id":"start"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"i am 26 years old",
"conv_id":"27238"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"i am 26",
"conv_id":"27238"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"26",
"conv_id":"27238"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"jacket",
"conv_id":"start"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"i am 26 years old",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"jacket",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"i am a man",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"i am 26 years old",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"leather",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"shoes",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ressb <- POST("https://nlc-rr-handler.eu-gb.mybluemix.net/custom/summarize", encode = "multipart",
body = upload_file("samplerequest.json"),
content_type("Application/json"))
# ressb$headers
ressb$all_headers
# ressb$request
cat(content(ressb, "text"))
fromJSON(content(ressb, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"jacket",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"girl",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"i am 26 years old",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
oldres <- fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"jacket",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"girl",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"i am 26 years old",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
oldres
readLines("39720.chat")
chatt <- readLines("39720.chat")
asked <- unlist(lapply(strsplit(chatt, ":"), function(x) x[2]))
# accept the answers that NLC was able to classify
answers <- chatt[!is.na(asked)]
asked <- asked[!is.na(asked)]
answers <- unlist(lapply(strsplit(answers, ":"), function(x) x[1]))
length(answers) >= 3
query_to_rr <- paste(getKeywords(answers, asked), collapse = "%20")
getKeywords(answers, asked)
answers
asked
key.words <- unlist(lapply(1:length(answers), function(ii) corChatt(answers[ii], asked[ii])))
corChatt(answers[1], asked[1])
corChatt(answers[2], asked[2])
answers[2]
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"jacket",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"woman",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"jacket",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"woman",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"i am 26 years old",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
chatt <- readLines("39720.chat")
asked <- unlist(lapply(strsplit(chatt, ":"), function(x) x[2]))
# accept the answers that NLC was able to classify
answers <- chatt[!is.na(asked)]
asked <- asked[!is.na(asked)]
answers <- unlist(lapply(strsplit(answers, ":"), function(x) x[1]))
query_to_rr <- paste(getKeywords(answers, asked), collapse = "%20")
## local conversation
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"jacket",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"female",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"i am 26 years old",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
chatt<- readLines("39720.chat")
asked <- unlist(lapply(strsplit(chatt, ":"), function(x) x[2]))
# accept the answers that NLC was able to classify
answers <- chatt[!is.na(asked)]
asked <- asked[!is.na(asked)]
answers <- unlist(lapply(strsplit(answers, ":"), function(x) x[1]))
query_to_rr <- paste(getKeywords(answers, asked), collapse = "%20")
key.words <- unlist(lapply(1:length(answers), function(ii) corChatt(answers[ii], asked[ii])))
index.gen <- tail(which(asked == "user_gender"), 1)
index.age <- tail(which(asked == "user_age"), 1)
getBGMW(key.words[index.age], key.words[index.gen])
new.cat <- getBGMW(key.words[index.age], key.words[index.gen])
key.words[-c(index.age, index.gen)]
key.words <- c(new.cat, key.words[-c(index.age, index.gen)])
query_to_rr <- paste(getKeywords(answers, asked), collapse = "%20")
# query_to_rr <- paste(answers, collapse = "%20")
query_to_rr <- gsub("\ ", "%20", query_to_rr) # the proper solution after 'shortDescription' is solved
# query_to_rr <- gsub("\ ", "_", query_to_rr)
getRRresp(query_to_rr)
### PreReqs, UDFs and settings for the app
## the very first function to install or load namespaces
load_or_install <- function(func = "", ...){
if(require(package =  func, character.only = T) == FALSE){
install.packages(func, clean = T, ...)
require(package =  func, character.only = T)
} else {
require(package =  func, character.only = T)
}
}
##
## Load libs
load_or_install("httr", repos='http://cran.rstudio.com/')
##
## get the next question based on current chat
getNextQue <- function(chatt) {
# # look for existing data and send next question
# asked <- unlist(lapply(strsplit(chatt, ":"), function(x) x[2]))
# asked <- asked[!is.na(asked)]
# if(length(asked) < 3 | length(asked) == 0){
#
#   ## ask the remaining questions
#   # all.classes <- c("user_gender", "user_age", "query_cloth")
#   all.classes <- as.character(read.csv2("train_data_nlc_new.csv")[,4]) # or [,3]
#   rem.classes <- all.classes[!(all.classes %in% asked)]
#
#   if(length(rem.classes) != 0){
#     rem.classes <- rem.classes[1]
#     switch (rem.classes,
#             "user_gender" = {next.que <- "What is your gender?"},
#             "user_age" = {next.que <- "What is your age?"},
#             "query_cloth" = {next.que <- "What are you looking for?"})
#   }
# } else {
#   next.que <- "Out of questions now... will send the query to RR..."
# }
# return(next.que)
# new classes
# look for existing data and send next question
asked <- unlist(lapply(strsplit(chatt, ":"), function(x) x[2]))
asked <- asked[!is.na(asked)]
asked <- unique(asked)
if(length(asked) < 9 | length(asked) == 0){
## ask the remaining questions
all.classes <- c("query_cloth", "user_gender", "user_age", "style",
"brand", "color", "price", "material", "climate")
rem.classes <- all.classes[-c(1:length(asked))]
if(length(rem.classes) != 0){
rem.classes <- rem.classes[1]
switch (rem.classes,
"user_gender" = {next.que <- "What is your gender?"},
"user_age" = {next.que <- "What is your age?"},
"query_cloth" = {next.que <- "What are you looking for?"},
"style" = {next.que <- "Are you looking for any specific styles?"},
"brand" = {next.que <- "Do you have any preferences for brands?"},
"color" = {next.que <- "Are you looking for a specific color?"},
"price" = {next.que <- "Do you have any price criteria?"},
"material" = {next.que <- "Any additional material details?"},
"climate" = {next.que <- "What season are you going to wear it in?"})
} else {
next.que <- ""
}
} else {
next.que <- ""
}
return(next.que)
}
## send a query to RR and get catentry.ids in response
getRRresp <- function(query_to_rr){
uname_rr <- "8c676d2c-38a7-4604-b4a3-3849f51e84a6 : Ph4ZKUhXxsAo"
ranker_id <- "3b140ax15-rank-3562"
# example query url
# url_rr <- "https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters/scb7c0999c_d827_4d15_b305_2ddbf02fcd44/solr/example_collection/select?q=shortDescription:male_jackets_black_leather&wt=json"
query_url_rr <- paste0("https://gateway.watsonplatform.net/retrieve-and-rank/api/v1/solr_clusters/scb7c0999c_d827_4d15_b305_2ddbf02fcd44/solr/example_collection/select?q=", query_to_rr, "&wt=json")
anss <- fromJSON(getURL(query_url_rr, userpwd = uname_rr))
if(anss$responseHeader$status == 400){
catentry.ids <- list("error_code_400")
} else if(anss$responseHeader$status == 0) {
if(length(anss$response$docs) != 0){
catentry.ids <- lapply(1:length(anss$response$docs), function(ii) anss$response$docs[[ii]]$catentry_id)
} else {
catentry.ids <- list()
}
} else {
catentry.ids <- "Something went wrong..."
}
return(catentry.ids)
}
## get gender
getGender <- function(user.txt){
if(grepl("female|woman", tolower(user.txt))){
return("female")
} else if (grepl("male|man", tolower(user.txt))) {
return("male")
}
}
## get one of the four categories: boy, girl, man, woman
getBGMW <- function(user_age, user_gender){
user_gender <- tolower(user_gender)
switch(user_gender,
"male" = {
if(user_age <= 15){
return("boy")
} else {
return("man")
}
},
"female" = {
if(user_age <= 15){
return("girl")
} else {
return("woman")
}
},
"man" = {
if(user_age <= 15){
return("boy")
} else {
return("man")
}
},
"woman" = {
if(user_age <= 15){
return("girl")
} else {
return("woman")
}
},
"boy" = {
if(user_age <= 15){
return("boy")
} else {
return("man")
}
},
"girl" = {
if(user_age <= 15){
return("girl")
} else {
return("woman")
}
})
}
# correct the chat with extracted keywords
corChatt <- function(user.txt, class.ans){
if(length(class.ans) != 0){
if(class.ans %in% c("user_gender", "user_age")){
switch (class.ans,
"user_age" = {return(getDigits(user.txt))},
"user_gender" = {return(getGender(user.txt))}
)
} else {
return(user.txt)
}
}
}
getKeywords <- function(answers, asked){
key.words <- unlist(lapply(1:length(answers), function(ii) corChatt(answers[ii], asked[ii])))
index.gen <- tail(which(asked == "user_gender"), 1)
index.age <- tail(which(asked == "user_age"), 1)
new.cat <- getBGMW(key.words[index.age], key.words[index.gen])
key.words <- c(new.cat, key.words[-c(index.age, index.gen)])
return(key.words)
}
readLines("39720.chat")
readLines("39720.chat")
chatt <- readLines("39720.chat")
asked <- unlist(lapply(strsplit(chatt, ":"), function(x) x[2]))
# accept the answers that NLC was able to classify
answers <- chatt[!is.na(asked)]
asked <- asked[!is.na(asked)]
answers <- unlist(lapply(strsplit(answers, ":"), function(x) x[1]))
query_to_rr <- paste(getKeywords(answers, asked), collapse = "%20")
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"jacket",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"jacket",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"i am 26 years old",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
,
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"jacket girl",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
thefile <- "train_data_nlc_fin.csv" # "train_data_nlc.csv"
thename <- "\"hack02\""
watson.nlc.createnewclassifier(thefile, thename)  # calls function, passes file and name from above, starts the magic. might take 2 to 20+ minutes depending on complexity
watson.nlc.listallclassifiers()
cat(watson.nlc.checkclassifierstatus(status))
fromJSON(watson.nlc.checkclassifierstatus(status))
cat(watson.nlc.checkclassifierstatus(status))
as.character(watson.nlc.listallclassifiers()$classifier)
status <- as.character(watson.nlc.listallclassifiers()$classifier)[2] # 2374f9x69-nlc-6914
cat(watson.nlc.checkclassifierstatus(status))
cat(watson.nlc.checkclassifierstatus(status))
cat(watson.nlc.checkclassifierstatus(status))
ress <- POST("http://10.0.50.252:1234/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"jacket girl",
"conv_id":"39720"}', content_type("application/json"))
fromJSON(content(ress, "text"))
ress
ressb <- POST("https://nlc-rr-handler-old.eu-gb.mybluemix.net/custom/summarize", encode = "multipart",
body = upload_file("samplerequest.json"),
content_type("Application/json"))
# ressb$headers
ressb$all_headers
fromJSON(content(ressb, "text"))
cat(watson.nlc.checkclassifierstatus(status))
as.character(watson.nlc.listallclassifiers()$classifier)[2]
"2374f9x68-nlc-7215"
cat(watson.nlc.checkclassifierstatus(status))
cat(watson.nlc.checkclassifierstatus(status))
ressb <- POST("https://nlc-rr-handler-old.eu-gb.mybluemix.net/custom/summarize", encode = "multipart",
body = upload_file("samplerequest.json"),
content_type("Application/json"))
# ressb$headers
ressb$all_headers
# ressb$request
fromJSON(content(ressb, "text"))
cat(watson.nlc.checkclassifierstatus(status))
ress <- POST("http://nlc-rr-handler.eu-gb.mybluemix.net/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"i play ",
"conv_id":"NULL"}', content_type("text"))
ress
ress <- POST("http://nlc-rr-handler.eu-gb.mybluemix.net/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"jacket",
"conv_id":"start"}', content_type("text"))
ress
ress$all_headers
fromJSON(content(ress, "text"))
ress <- POST("http://nlc-rr-handler.eu-gb.mybluemix.net/custom/summarize", encode = "multipart",
body = '{"user_pass":"nlc_rr_handler:hackathon@2016",
"query":"i play",
"conv_id":"start"}', content_type("text"))
ress
ress$all_headers
fromJSON(content(ress, "text"))
cat(watson.nlc.checkclassifierstatus(status))
query = "I am 89"
watson.nlc.processtextreturnclass(classifier,query)
query = "skinny jeans"
watson.nlc.processtextreturnclass(classifier,query)
query = "jeans"
watson.nlc.processtextreturnclass(classifier,query)
query = "jeans"
watson.nlc.processtextreturnclass(classifier,query)
query = "shoes"
watson.nlc.processtextreturnclass(classifier,query)
classifier <<- "2374f9x68-nlc-7215" # "2374f9x69-nlc-6914" # the nlc id
query = "shoes"
watson.nlc.processtextreturnclass(classifier,query)
query = "skinny jeans"
watson.nlc.processtextreturnclass(classifier,query)
query = "skinny"
watson.nlc.processtextreturnclass(classifier,query)
